// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Exception$ReView = require("../Exception.bs.js");
var Reconciler$ReView = require("../Reconciler.bs.js");
var RenderContext$ReView = require("../RenderContext.bs.js");

function use(initialState) {
  if (RenderContext$ReView.isActive(/* () */0)) {
    var match = RenderContext$ReView.getContext(/* () */0);
    var index = match.index;
    var slot = match.slot;
    var root = match.root;
    var parent = match.parent;
    var node = match.node;
    var current = slot.contents;
    var state = node.getState(current);
    var dispatch = node.getState(current + 1 | 0);
    var actualState;
    if (state !== undefined) {
      var match$1 = state;
      if (match$1.tag === /* BasicState */2) {
        actualState = match$1[0];
      } else {
        throw Exception$ReView.IllegalSlotAccess;
      }
    } else {
      node.setState(current, /* BasicState */Block.__(2, [initialState]));
      actualState = initialState;
    }
    var actualDispatch;
    if (dispatch !== undefined) {
      var match$2 = dispatch;
      if (match$2.tag === /* SetState */3) {
        actualDispatch = match$2[0];
      } else {
        throw Exception$ReView.IllegalSlotAccess;
      }
    } else {
      var newDispatch = function (newState) {
        var prevState = node.getState(current);
        if (prevState !== undefined) {
          var match = prevState;
          if (match.tag === /* BasicState */2) {
            var value = match[0];
            var actual = Curry._1(newState, value);
            if (Caml_obj.caml_notequal(value, actual)) {
              node.setState(current, /* BasicState */Block.__(2, [actual]));
              return Reconciler$ReView.request(node, parent, index, root);
            } else {
              return 0;
            }
          } else {
            throw Exception$ReView.IllegalSlotAccess;
          }
        } else {
          throw Exception$ReView.IllegalSlotAccess;
        }
      };
      node.setState(current + 1 | 0, /* SetState */Block.__(3, [newDispatch]));
      actualDispatch = newDispatch;
    }
    slot.contents = current + 2 | 0;
    return /* tuple */[
            actualState,
            actualDispatch
          ];
  } else {
    throw Exception$ReView.IllegalRenderContextAccess;
  }
}

exports.use = use;
/* Reconciler-ReView Not a pure module */
