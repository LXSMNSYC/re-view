// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Exception$ReView = require("../Exception.bs.js");
var Reconciler$ReView = require("../Reconciler.bs.js");
var RenderContext$ReView = require("../RenderContext.bs.js");

function use(reducer, initialState) {
  if (RenderContext$ReView.isActive(/* () */0)) {
    var match = RenderContext$ReView.getContext(/* () */0);
    var index = match.index;
    var slot = match.slot;
    var root = match.root;
    var parent = match.parent;
    var node = match.node;
    var current = slot.contents;
    var state = node.getState(current);
    var dispatch = node.getState(current + 1 | 0);
    var actualState = state !== undefined ? Caml_option.valFromOption(state) : (node.setState(current, initialState), initialState);
    var actualDispatch;
    if (dispatch !== undefined) {
      actualDispatch = Caml_option.valFromOption(dispatch);
    } else {
      var newDispatch = function (action) {
        var prevState = node.getState(current);
        if (prevState !== undefined) {
          var value = Caml_option.valFromOption(prevState);
          var newState = Curry._2(reducer, value, action);
          if (Caml_obj.caml_notequal(value, newState)) {
            node.setState(current, newState);
            return Reconciler$ReView.request(node, parent, index, root);
          } else {
            return 0;
          }
        } else {
          throw Exception$ReView.IllegalSlotAccess;
        }
      };
      node.setState(current + 1 | 0, newDispatch);
      actualDispatch = newDispatch;
    }
    slot.contents = current + 2 | 0;
    return /* tuple */[
            actualState,
            actualDispatch
          ];
  } else {
    throw Exception$ReView.IllegalRenderContextAccess;
  }
}

exports.use = use;
/* Reconciler-ReView Not a pure module */
