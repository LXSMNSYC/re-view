// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Node$ReView = require("./Node.bs.js");
var Utils$ReView = require("./Utils.bs.js");
var RenderContext$ReView = require("./RenderContext.bs.js");
var ModuleResolver$ReView = require("./ModuleResolver.bs.js");

function request(node, parent, index, root) {
  if (node.mountSchedule) {
    return 0;
  } else {
    node.mountSchedule = true;
    return Utils$ReView.scheduleAsync((function (param) {
                  node.mountSchedule = false;
                  RenderContext$ReView.setContext({
                        node: node,
                        parent: parent,
                        root: root,
                        slot: {
                          contents: 0
                        },
                        index: index
                      });
                  node.mount(parent);
                  var component = node.component;
                  if (component !== undefined) {
                    var childNode = Curry._1(component.render, node.props);
                    if (childNode !== undefined) {
                      var render = ModuleResolver$ReView.getModule("render");
                      Curry._4(render, Caml_option.valFromOption(childNode), node, undefined, Caml_option.some(root));
                    }
                    
                  }
                  RenderContext$ReView.popContext(/* () */0);
                  parent.setNode(index, node);
                  return /* () */0;
                }));
  }
}

function unmount(node, parent, index) {
  if (node.unmountSchedule) {
    return 0;
  } else {
    node.unmountSchedule = true;
    return Utils$ReView.scheduleAsync((function (param) {
                  node.unmountSchedule = false;
                  var nodes = node.nodes;
                  $$Array.iteri((function (i, child) {
                          return unmount(child, node, i);
                        }), nodes);
                  parent.clearNode(index);
                  node.unmount();
                  return /* () */0;
                }));
  }
}

function render(node, parent, index, root) {
  var actualRoot = root !== undefined ? Caml_option.valFromOption(root) : parent;
  var actualIndex = index !== undefined ? index : 0;
  var renderedNode = parent.getNode(actualIndex);
  if (renderedNode !== undefined) {
    var actualNode = Caml_option.valFromOption(renderedNode);
    if (Caml_obj.caml_notequal(actualNode.component, node.component)) {
      unmount(actualNode, parent, actualIndex);
      return request(node, parent, actualIndex, actualRoot);
    } else if (Caml_obj.caml_notequal(Node$ReView.toEquatable(actualNode), Node$ReView.toEquatable(node))) {
      node.replicate(actualNode);
      return request(node, parent, actualIndex, actualRoot);
    } else {
      return 0;
    }
  } else {
    return request(node, parent, actualIndex, actualRoot);
  }
}

ModuleResolver$ReView.setModule("render", render);

exports.request = request;
exports.unmount = unmount;
exports.render = render;
/*  Not a pure module */
